{"https://github.com/isl-org/OpenBot/blob/master/README.md": "OpenBot transforms smartphones into robot brains, enabling low-cost robotic vehicles. Its software stack supports advanced robotics functions like person following and autonomous navigation. Users can build their own robot body, flash Arduino firmware, install Android apps, and program robots in the Playground. Videos and community projects showcase OpenBot's capabilities. Users can contact the team via Slack or email, and contribute to the project according to guidelines. The team requests citation of their paper if OpenBot is used.", "https://github.com/isl-org/OpenBot/blob/master/android/README.md": "This readme provides information about Android apps for OpenBot:\n\n- **Features:** Links to the Robot and Controller apps' feature descriptions.\n- **Installation:** Instructions for installing the apps using QR codes or from the assets of GitHub releases.\n- **Building:** Prerequisites, process, and troubleshooting tips for compiling and deploying the apps using Android Studio.", "https://github.com/isl-org/OpenBot/blob/master/android/controller/README.md": "This Android app serves as a remote controller for the OpenBot vehicle. It connects via Bluetooth and allows control through on-screen buttons or tilting the phone. Features include turn indicators, accelerometer-based driving, brake and accelerator pedals, and future plans to integrate sensor information and camera feed.", "https://github.com/isl-org/OpenBot/blob/master/android/robot/README.md": "**Robot App**\n\nThis app for Android devices is a comprehensive interface for controlling and interacting with OpenBot robots.\n\n**Features:**\n\n- Multiple control modes (game controller, smartphone)\n- Customizable drive modes (game, joystick, differential)\n- Data collection for sensor readings and control commands\n- Model management for object detection and autonomous navigation\n- Integration with OpenBot Playground for remote control and data transfer\n\n**Usage:**\n\n- Connect to the OpenBot via USB or Bluetooth\n- Select the desired control mode and drive mode\n- Adjust the camera feed and model settings\n- Start/stop data collection\n- Execute OpenBot Playground projects for advanced functionality\n\n**Developer Notes:**\n\n- Based on TensorFlow Lite Object Detection Android Demo\n- Key classes: DefaultActivity (main thread), SensorService (sensor data logging), ServerService (connection to Python server)\n- Model definitions for autopilot and detector networks are in the \"tflite\" package\n- Customization options are available for adding new fragments (see ContributionGuide.md)", "https://github.com/isl-org/OpenBot/blob/master/android/robot/src/main/java/org/openbot/googleServices/README.md": "Google Firebase is a platform for developing mobile and web applications that provides services and tools for building high-quality apps efficiently. One of its features is Firebase Google Sign-In Authentication, which enables users to sign in to apps with their Google credentials. This guide explains how to set up a Firebase project for Google Sign-In, including steps on how to obtain the SHA-1 key and configure Google Sign-In authentication. It also explains how to update the app's configuration if Firebase authentication was implemented before adding the SHA-1 key.", "https://github.com/isl-org/OpenBot/blob/master/android/robot/ContributionGuide.md": "This codebase uses a single activity architecture with a MainActivity containing a MainFragment that routes to features via Android's Navigation component.\n\nThe project includes abstract classes:\n\n- ControlsFragment: Provides functionality to control a robot via a controller.\n- CameraFragment: Extends ControlsFragment to enable camera preview and provides methods to overlay UI on top of the preview.\n\nTo add a new feature, create a fragment and layout, extend either ControlsFragment or CameraFragment based on camera preview needs, add it to FeatureList.java, and link it to the navigation graph.", "https://github.com/ob-f/OpenBot/blob/master/body/README.md": "OpenBot provides options for building and purchasing robot bodies compatible with its software stack. You can build:\n\n* Custom bodies using microcontrollers like Arduino Nano\n* 3D-printed bodies for wheeled robots (DIY and Lite versions)\n* Bodies for 1:16 RC trucks\n* Multi-terrain vehicles for outdoor projects\n\nPre-built RTR bodies are available for purchase on Amazon. Visit the documentation and build instructions provided for specific options. Once a body is built, flash the Arduino firmware to complete the setup.", "https://github.com/ob-f/OpenBot/blob/master/body/diy/cad/block_body/README.md": "The Blocky Body robot chassis provides extra height for easier electronics placement and a Lego-compatible top for educational purposes. It comes with various top part options, including a basic top, a Lego-compatible top, a large top for electronics, and a large top with a Lego-compatible surface. The print bed size must be at least 221x150mm. Recommended print settings include a 0.2mm layer height, 25% infill, and concentric support.", "https://github.com/ob-f/OpenBot/blob/master/body/diy/cad/glue_body/README.md": "This folder provides a glueable OpenBot body for 3D printers with limited build volumes. It includes four required parts and three optional parts that can enhance the gluing process. The printable files are available in STL and STEP formats.", "https://github.com/ob-f/OpenBot/blob/master/body/diy/cad/regular_body/README.md": "The Regular Body section for OpenBot provides instructions for printing the body parts: body_bottom and body_top. The required build plate size is 240mmx150mm. Print settings recommended for an Ultimaker S5 include 0.2mm layer height, 1.5mm wall thickness, and 20% infill density. Printing materials PLA, ABS, and CPE are suitable, and the print settings have minimal impact on quality. Slower printing with smaller layer height and support structure can improve results.", "https://github.com/ob-f/OpenBot/blob/master/body/diy/cad/slim_body/README.md": "The Slim Body folder provides 3D models for a smaller version of the OpenBot body, designed for printers with limited build volumes. It includes two main parts (bottom and top) that can be printed on a 220mmx220mm build plate by rotating them 45 degrees. Adjustments to print settings may be necessary to maximize the print area. An optional top with a larger rim is also available for printers with slightly more space.", "https://github.com/ob-f/OpenBot/blob/master/body/diy/pcb/README.md": "The custom PCB integrates an Arduino Nano and provides improved motor drivers, voltage dividers, and LED connections. The latest version 2 features enhanced pin assignments, a power LED, updated components, and upright motor connectors. Users can order the PCB and components separately or opt for a TurnKey solution with assembly. PCBWay and JLCPCB offer convenient assembly services for a seamless manufacturing process.", "https://github.com/ob-f/OpenBot/blob/master/body/diy/README.md": "**OpenBot DIY**\n\nThis project provides instructions for building a wheeled robot using low-cost, readily available hardware. Choose from two assembly options:\n\n**Option 1: DIY**\n\n- Utilize an Arduino Nano, L298N motor driver, TT motors, and other components.\n- Requires extensive wiring, especially for optional features.\n\n**Option 2: Custom PCB**\n\n- Use a custom PCB designed to reduce wiring and simplify assembly.\n- Requires Micro JST PH 2.0 cables and same components as Option 1.\n\n**Required Components:**\n\n- Arduino Nano\n- TT Motors (4)\n- 18650 Batteries (3)\n- Screws and nuts\n\n**Optional Components:**\n\n- Speed Sensors\n- Ultrasonic Sensor\n- Indicator LEDs\n- OLED Display\n\n**Assembly:**\n\nFollow the detailed instructions and images provided in the README for both DIY and PCB options.\n\n**Next Steps:**\n\n- Flash the Arduino Firmware to bring your robot to life.", "https://github.com/ob-f/OpenBot/blob/master/body/lite/README.md": "OpenBot for Education provides:\n\n- **Curriculum:** Step-by-step YouTube videos to teach AI and robotics using OpenBot software stack.\n- **OpenBot Lite:** A simplified version for educational use, compatible with micro:bit or Arduino Nano.\n- **Video Guides:** Playlists for assembling OpenBot Lite, implementing person following, and policy learning for autonomous driving.", "https://github.com/ob-f/OpenBot/blob/master/body/mtv/pcb/README.md": "The MTV control architecture consists of a high-level smartphone command system and a low-level ESP32 board for PWM generation and sensor communication. The ESP32 communicates with the smartphone via a dedicated USB interface. The MTV's locomotion uses six motors with planetary gearboxes and magnetic encoders, controlled by heavy-duty motor drivers. The project includes custom-designed PCBs for power distribution and control, featuring modularity and ease of expansion. The project also includes prototyped PCBs with ESP32 and motor drivers installed.", "https://github.com/ob-f/OpenBot/blob/master/body/mtv/README.md": "The MTV is a 6-wheel, all-terrain vehicle designed with inexpensive components and hardware commonly found in printers for ease of 3D printing. Compatible with the OpenBot body, its design is based on several exploration vehicle concepts and can be maneuvered intuitively like a tank. The guide provides a short summary of the assembly process, including 3D printing, electro-mechanical assembly, and electronics assembly.", "https://github.com/ob-f/OpenBot/blob/master/body/rc_truck/README.md": "**OpenBot RC-Truck Body**\n\nThis project provides a 3D-printable body for widely available 1:16 scale RC-toy trucks. The body includes:\n\n* A main frame\n* Side covers\n* Optional parts (camera elevator, electronics covers, spacers, front light spacers)\n\n**Chassis**\n\nThe chassis consists of:\n\n* A 1:16 scale RC-toy truck\n* Custom-designed 3D-printed parts\n\n**Assembly**\n\nIt is recommended to use the OpenBot [custom PCB](/body/pcb) for building the RC-Truck, which allows for cleaner assembly and compatibility with different OpenBot bodies.\n\n**Bill of Materials**\n\nRequired components:\n\n* RC-toy truck\n* Arduino Nano\n* OpenBot [Custom PCB](/body/pcb)\n* USB OTG cable\n* Spring or rubber band\n* Screws, nuts, and dupont cables\n\nOptional components:\n\n* Ultrasonic Sensor\n* On/Off Switches\n* LEDs for indicators and rear lights\n\n**Build Instructions**\n\n1. Disassemble the RC-toy truck and expose/losen the wire connectors for motors and UBEC output.\n2. Prepare the ```main_frame```, including optional features like LED holes and ultrasonic sensor mounting.\n3. Wire the ultrasonic sensor, LED indicators, front LED lamps, rear Red LEDs (with voltage divider), and ON/OFF switches (optional).\n4. Mount the ```phone_mount_bottom```, ```phone_mount_top```, ```side_covers```, and ```main_frame``` onto the RC-toy truck.\n5. Mount the PCB with spacers on the ```main_frame``` and connect the Arduino Nano, ultrasonic sensor, indicator LEDs, UBEC output, and servos.\n6. Connect the battery and install the front and back ```electronics_covers```.", "https://github.com/ob-f/OpenBot/blob/master/body/rtr/README.md": "The OpenBot offers two ready-to-run (RTR) vehicle models: RTR_TT and RTR_520. Both feature pre-integrated electronics but differ in functionality and terrain suitability. Users can also build their own RTR by 3D printing the chassis, manufacturing PCBs, and sourcing motors and a phone mount. Detailed instructions, PCB specifications, and firmware flashing instructions are provided for those choosing to build their own RTR.", "https://github.com/ob-f/OpenBot/blob/master/controller/flutter/ios/Runner/Assets.xcassets/LaunchImage.imageset/README.md": "This README provides instructions on how to customize the launch screen of a Flutter project by replacing image files in the \"Launch Screen Assets\" directory or through Xcode's Asset Catalog.", "https://github.com/ob-f/OpenBot/blob/master/controller/flutter/README.md": "The Flutter Controller app provides remote control for an OpenBot vehicle. It connects via Bluetooth and supports live video/audio streaming. Users can operate the vehicle through on-screen controls or tilt gestures. The app includes features like turn indicators, camera switching, muting, and mirroring. It integrates with the OpenBot control mode to establish a connection, allowing users to drive the vehicle with Dual Drive or Tilt mode controls.", "https://github.com/ob-f/OpenBot/blob/master/firmware/README.md": "**Firmware for OpenBot**\n\nThis firmware bridges the robot and smartphone, handling low-level control, sensor readings, and serial communication.\n\n**Features**\n\n* Controls motor speed and LED indicators\n* Monitors wheel rotation and battery voltage\n* Measures distance to obstacles (optional ultrasonic sensor)\n\n**Configuration**\n\nConfigure hardware and features in the code:\n\n* Model type (DIY, PCB, RTR)\n* Bluetooth connectivity (optional)\n* Sensor enable/disable flags (voltage divider, indicators, speed sensors, ultrasound, bumper, OLED)\n\n**Dependencies**\n\n* PinChangeInterrupt library (for speed sensors and ultrasound)\n* Adafruit libraries (for OLED)\n\n**Upload**\n\n* Settings for Arduino Nano: Board (Arduino Nano), Processor (ATmega328P Old Bootloader)\n* Settings for ESP32: Board (ESP32 Dev Module)\n\n**Testing**\n\n* Test functionality via Serial Monitor:\n    * Send commands to control motors, indicators, LEDs\n    * Receive sensor readings (voltage, speed, distance)\n* Perform test procedure to ensure all functions are working\n\n**No Phone Mode**\n\n* Set `NO_PHONE_MODE` to `1`\n* Car drives at normal speed, slows down near obstacles, and turns or reverses when necessary\n\n**Using Other MCUs**\n\n* Requirements: USB-to-TTL Serial, PWM outputs, analog pin, digital pins for sensors and indicators\n* Port firmware to the desired MCU", "https://github.com/ob-f/OpenBot/blob/master/ios/OpenBot/OpenBot/Authentication/README.md": "Firebase is a platform for mobile and web development that offers features like user authentication, hosting, and database management. In this app, Firebase is used for Google Sign-In authentication to access OpenBot Playground projects on Google Drive. Prerequisites for integrating Firebase include a Google account and Cocoapods. To set up Firebase, create a project in the Firebase Console, add an iOS app, and enable Google Sign-In authentication. Add the Firebase SDK to your iOS project using CocoaPods and complete the integration by following the steps in the \"Set up the iOS Project\" section. Common troubleshooting issues related to CocoaPods installation and Firebase configuration are also addressed.", "https://github.com/ob-f/OpenBot/blob/master/ios/OpenBot/README.md": "**iOS App Beta**\n\n**Overview:**\nThe Robot iOS App, currently in beta, provides remote control, data collection, autopilot functionality, and object tracking for OpenBot vehicles.\n\n**Safety and App Development Status:**\n- **Safety:** Operate in safe environments, as collisions may damage your phone.\n- **App Development:** In development, may crash or exhibit unexpected behavior. Use at your own risk.\n\n**Upcoming Feature:**\n- App will soon be available on the App Store.\n\n**App Interface:**\n- **Main Menu:**\n  - Access to various app screens, including Bluetooth connection, settings, and main functionalities.\n- **Bluetooth Connection:**\n  - Connects to compatible OpenBot vehicles using Bluetooth Low-Energy (BLE).\n- **Free Roam:**\n  - Real-time robot control with battery, speed, and distance information.\n- **Control:**\n  - Control modes: Gamepad or Phone\n  - Drive modes: Drive, Neutral, Reverse\n  - Speed modes: Slow, Normal, Fast\n- **Data Collection:**\n  - Collects sensor data and images for training autopilot models.\n- **Controller Mapping:**\n  - Checks the button and joystick mapping of a connected controller.\n- **Robot Info:**\n  - Displays robot type, sensor readings, and allows for basic motor and LED control.\n- **Autopilot:**\n  - Runs trained autopilot models to navigate the robot autonomously.\n- **Object Tracking:**\n  - Tracks objects of various classes using AI models.\n- **Model Management:**\n  - Manages and downloads AI models for the app.\n- **Navigation:**\n  - Uses ARKit to set navigation goals for the robot.\n- **Projects Screen:**\n  - Connect to OpenBot Playground projects or scan QR codes.\n- **Profile Screen:**\n  - Profile editing and logout options.\n- **OpenBot PlayGround Screen:**\n  - Access to OpenBot Playground services.\n\n**Code Structure:**\n- Based on TensorFlow Lite Object Detection iOS Demo\n- Model definitions in the 'tflite' folder.", "https://github.com/ob-f/OpenBot/blob/master/open-code/src/components/blockly/README.md": "**OpenBot PlayGround Features:**\n\n* Customizable blocks for controlling program flow (Control, Loops, Operators, Variables)\n* Control over lights, sound, sensors, movement, and AI features:\n    * Adjustable brightness for LED lights\n    * Switch between controller modes (Gamepad or Phone) and drive modes (Joystick, Game, Dual)\n    * Play sounds based on drive mode and speed\n    * Access to car sensors (Sonar, Speed, Bumpers) and phone sensors (Gyroscope, Acceleration, Magnetic)\n    * Set speed and movement direction\n* AI capabilities:\n    * Object tracking, autopilot, and point goal navigation\n    * Multiple detection block for identifying and tracking specific object classes\n    * Advanced AI blocks for modular detection and autopilot functionality", "https://github.com/ob-f/OpenBot/blob/master/open-code/src/services/README.md": "Firebase Google Sign-In Authentication allows users to sign in to web apps using their Google credentials. Developers must set up a Firebase project, configure Google Drive services, and enable Google Sign-In in the Firebase Authentication settings. The document provides instructions for these steps, including adding environment variables and enabling the Firestore database. It also addresses potential troubleshooting issues, such as invalid credentials errors and CORS errors.", "https://github.com/ob-f/OpenBot/blob/master/open-code/README.md": "OpenBot Playground is a web-based platform that allows users to build instructions for OpenBot robots using a drag and drop interface. It supports both JavaScript and Python code generation and provides features like Google Drive storage, code editor, and AI model integration.", "https://github.com/ob-f/OpenBot/blob/master/policy/frontend/README.md": "The OpenBot Policy Frontend project, built with Create React App, provides a frontend interface for managing policies and includes:\n\n**Available Scripts:**\n\n* `yarn start`: Runs the app in development mode.\n* `yarn test`: Launches the interactive test runner.\n* `yarn build`: Builds the production-ready app to the `build` folder.", "https://github.com/ob-f/OpenBot/blob/master/policy/README.md": "## Advanced Driving Policy Training with OpenBot\n\n### Safety and Setup\n\n* **Safety:** Use with caution in a safe environment and keep a game controller connected for emergency stops.\n* **Compute Hardware:** Training requires high resources; use a high-end computer with dedicated GPU for best results.\n* **Patience Required:** Training can be challenging and requires patience.\n\n### Dependencies\n\n* Create a conda environment using the provided environment files.\n* Ensure necessary GPU drivers are installed (Windows: Microsoft C++ Build Tools).\n* Install dependencies via `conda` or `pip`.\n\n### Dataset Collection\n\n* Collect data via a game controller and Bluetooth connection.\n* Store data in the `dataset` folder with subfolders for training and testing.\n* The common split is 80% training, 20% testing.\n* Alternatively, upload logs to a Python server for automatic data collection and conversion.\n\n### Policy Training\n\n* Use the provided Jupyter Notebook (`policy_learning.ipynb`) for guided training.\n* Adjust hyperparameters as needed using `--no_tf_record`, `--create_tf_record`, `--model`, etc. (see full list in documentation).\n* Train the policy from the shell or Jupyter Notebook.\n* Enable batch norm and use a larger batch size and number of epochs for final deployment.\n\n### Deployment\n\n* Replace the `autopilot_float.tflite` file in Android Studio with the trained model.\n* Recompile the app and test it on the robot.\n\n### Web App (Beta)\n\n* Provides a web interface for:\n    * Automatic log upload\n    * Dataset management\n    * Model training progress tracking\n* Quickstart: Run `python -m openbot.server`.\n* Access the app at `http://localhost:8000/#/uploaded`.", "https://github.com/ob-f/OpenBot/blob/master/python/README.md": "OpenBot's Python control module enables Linux-based computers to operate OpenBot vehicles using Python scripts, a camera for sensing, and control via inference or joystick. Installation requires Python modules for inference, joystick control, sensing, and actuation, as well as drivers for the camera and controller. For optimized performance, export trained models to OpenVino format. The module includes various functions for generating training data, controlling the robot in debug, inference, or joystick modes, and testing functionalities."}